DROP TABLE IF EXISTS Patient CASCADE;
DROP TABLE IF EXISTS Admin CASCADE;
DROP TABLE IF EXISTS Hospitals CASCADE;
DROP TABLE IF EXISTS Doctors CASCADE;
DROP TABLE IF EXISTS Availability CASCADE;
DROP TABLE IF EXISTS Schedule CASCADE;
DROP TABLE IF EXISTS Appointments CASCADE;
DROP TABLE IF EXISTS Symptoms CASCADE;




CREATE TABLE Patient ( p_id UUID PRIMARY KEY, name VARCHAR(100) NOT NULL, check_up_type TEXT NOT NULL, CONSTRAINT fk_user FOREIGN KEY (p_id) REFERENCES auth.users(id) ON DELETE CASCADE );
CREATE TABLE Doctors ( id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL, specialty VARCHAR(100), contact_number VARCHAR(15) );
CREATE TABLE Availability ( id SERIAL PRIMARY KEY, doctor_id INT NOT NULL, date DATE NOT NULL, start_time TIME NOT NULL, end_time TIME NOT NULL, available_slots INT NOT NULL, CONSTRAINT fk_doctor_availability FOREIGN KEY (doctor_id) REFERENCES Doctors(id) ON DELETE CASCADE );
CREATE TABLE Appointments ( id SERIAL PRIMARY KEY, user_id UUID NOT NULL, doctor_id INT NOT NULL, appointment_date DATE NOT NULL, status VARCHAR(50) DEFAULT 'Pending', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_user_appointments FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE, CONSTRAINT fk_doctor_appointments FOREIGN KEY (doctor_id) REFERENCES Doctors(id) ON DELETE CASCADE );
